{"version":3,"sources":["views/forms/validation-forms/ValidationForms.js","reusable/DocsLink.js","reusable/ProBadge.js"],"names":["validationSchema","values","Yup","shape","firstName","min","required","lastName","userName","email","password","matches","confirmPassword","oneOf","accept","test","value","getErrorsFromValidationError","validationError","inner","reduce","errors","error","path","initialValues","onSubmit","setSubmitting","setErrors","setTimeout","alert","JSON","stringify","validateForm","formName","hasError","form","document","forms","i","length","name","focus","findFirstError","fieldName","Boolean","ValidationForms","href","target","rel","validate","getValidationSchema","validateSync","abortEarly","touched","handleChange","status","dirty","handleBlur","handleSubmit","isSubmitting","isValid","handleReset","setTouched","lg","noValidate","htmlFor","type","id","placeholder","autoComplete","valid","invalid","autoFocus","onChange","onBlur","md","variant","className","custom","color","disabled","onClick","touchAll","DocsLink","props","text","rest","React","memo","ProBadge","children","attributes"],"mappings":"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","file":"static/js/72.a80dd82c.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CCol,\n  CForm,\n  CInvalidFeedback,\n  CInputCheckbox,\n  CFormGroup,\n  CLabel,\n  CInput,\n  CRow\n} from '@coreui/react'\nimport { ProBadge, DocsLink } from 'src/reusable'\n\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\n\nconst validationSchema = function (values) {\n  return Yup.object().shape({\n    firstName: Yup.string()\n    .min(2, `First name has to be at least 2 characters`)\n    .required('First name is required'),\n    lastName: Yup.string()\n    .min(1, `Last name has to be at least 1 character`)\n    .required('Last name is required'),\n    userName: Yup.string()\n    .min(5, `Username has to be at least 5 characters`)\n    .required('Username is required'),\n    email: Yup.string()\n    .email('Invalid email address')\n    .required('Email is required!'),\n    password: Yup.string()\n    .min(6, `Password has to be at least ${6} characters!`)\n    .matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/, 'Password must contain: numbers, uppercase and lowercase letters\\n')\n    .required('Password is required'),\n    confirmPassword: Yup.string()\n    .oneOf([values.password], 'Passwords must match')\n    .required('Password confirmation is required'),\n    accept: Yup.bool()\n    .required('* required')\n    .test('accept', 'You have to accept our Terms and Conditions!', value => value === true),\n  })\n}\n\nconst validate = (getValidationSchema) => {\n  return (values) => {\n    const validationSchema = getValidationSchema(values)\n    try {\n      validationSchema.validateSync(values, { abortEarly: false })\n      return {}\n    } catch (error) {\n      return getErrorsFromValidationError(error)\n    }\n  }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n  const FIRST_ERROR = 0\n  return validationError.inner.reduce((errors, error) => {\n    return {\n      ...errors,\n      [error.path]: error.errors[FIRST_ERROR],\n    }\n  }, {})\n}\n\nconst initialValues = {\n  firstName: \"\",\n  lastName: \"\",\n  userName: \"\",\n  email: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  accept: false\n}\n\nconst onSubmit = (values, { setSubmitting, setErrors }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2))\n    // console.log('User has been successfully saved!', values)\n    setSubmitting(false)\n  }, 2000)\n}\n\nconst findFirstError = (formName, hasError) => {\n  const form = document.forms[formName]\n  for (let i = 0; i < form.length; i++) {\n    if (hasError(form[i].name)) {\n      form[i].focus()\n      break\n    }\n  }\n}\n\nconst validateForm = (errors) => {\n  findFirstError('simpleForm', (fieldName) => {\n    return Boolean(errors[fieldName])\n  })\n}\n\nconst touchAll = (setTouched, errors) => {\n  setTouched({\n    firstName: true,\n    lastName: true,\n    userName: true,\n    email: true,\n    password: true,\n    confirmPassword: true,\n    accept: true\n  })\n  validateForm(errors)\n}\n\nconst ValidationForms = () =>  {\n  return (\n    <CCard>\n      <CCardHeader>\n        Form Validation\n        <ProBadge/>\n        <DocsLink href=\"https://github.com/jaredpalmer/formik\"/>\n      </CCardHeader>\n      <CCardBody>\n        <a \n          href=\"https://github.com/jaredpalmer/formik\" \n          target=\"_blank\" rel=\"noreferrer noopener\"\n        >Formik</a> <cite>Build forms in React, without the tears</cite> with \n          \n        <a \n          href=\"https://github.com/jquense/yup\" \n          target=\"_blank\" \n          rel=\"noreferrer noopener\"\n        >Yup</a> <cite>Dead simple Object schema\n        validation</cite>\n        <hr />\n        <Formik\n          initialValues={initialValues}\n          validate={validate(validationSchema)}\n          onSubmit={onSubmit}\n        >\n          {\n            ({\n              values,\n              errors,\n              touched,\n              status,\n              dirty,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              isSubmitting,\n              isValid,\n              handleReset,\n              setTouched\n            }) => (\n              <CRow>\n                <CCol lg=\"6\">\n                  <CForm onSubmit={handleSubmit} noValidate name='simpleForm'>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"firstName\">First Name</CLabel>\n                      <CInput type=\"text\"\n                              name=\"firstName\"\n                              id=\"firstName\"\n                              placeholder=\"First Name\"\n                              autoComplete=\"given-name\"\n                              valid={!errors.firstName}\n                              invalid={touched.firstName && !!errors.firstName}\n                              autoFocus={true}\n                              required\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.firstName} />\n                      <CInvalidFeedback>{errors.firstName}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"lastName\">Last Name</CLabel>\n                      <CInput type=\"text\"\n                              name=\"lastName\"\n                              id=\"lastName\"\n                              placeholder=\"Last Name\"\n                              autoComplete=\"family-name\"\n                              valid={!errors.lastName}\n                              invalid={touched.lastName && !!errors.lastName}\n                              required\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.lastName} />\n                      <CInvalidFeedback>{errors.lastName}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"userName\">User Name</CLabel>\n                      <CInput type=\"text\"\n                              name=\"userName\"\n                              id=\"userName\"\n                              placeholder=\"User Name\"\n                              autoComplete=\"username\"\n                              valid={!errors.userName}\n                              invalid={touched.userName && !!errors.userName}\n                              required\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.userName} />\n                      <CInvalidFeedback>{errors.userName}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"email\">Email</CLabel>\n                      <CInput type=\"email\"\n                              name=\"email\"\n                              id=\"email\"\n                              placeholder=\"Email\"\n                              autoComplete=\"email\"\n                              valid={!errors.email}\n                              invalid={touched.email && !!errors.email}\n                              required\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.email} />\n                      <CInvalidFeedback>{errors.email}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CRow>\n                      <CCol md={6}>\n                        <CFormGroup>\n                          <CLabel htmlFor=\"password\">Password</CLabel>\n                          <CInput type=\"password\"\n                                  name=\"password\"\n                                  id=\"password\"\n                                  placeholder=\"Password\"\n                                  autoComplete=\"new-password\"\n                                  valid={!errors.password}\n                                  invalid={touched.password && !!errors.password}\n                                  required\n                                  onChange={handleChange}\n                                  onBlur={handleBlur}\n                                  value={values.password} />\n                          {/*<CInvalidFeedback>Required password containing at least: number, uppercase and lowercase letter, 8 characters</CInvalidFeedback>*/}\n                          <CInvalidFeedback>{errors.password}</CInvalidFeedback>\n                        </CFormGroup>\n                      </CCol>\n                      <CCol md={6}>\n                        <CFormGroup>\n                          <CLabel htmlFor=\"confirmPassword\">Password</CLabel>\n                          <CInput type=\"password\"\n                                  name=\"confirmPassword\"\n                                  id=\"confirmPassword\"\n                                  placeholder=\"Confirm password\"\n                                  autoComplete=\"new-password\"\n                                  valid={!errors.confirmPassword}\n                                  invalid={touched.confirmPassword && !!errors.confirmPassword}\n                                  required\n                                  onChange={handleChange}\n                                  onBlur={handleBlur}\n                                  value={values.confirmPassword} />\n                          <CInvalidFeedback>{errors.confirmPassword}</CInvalidFeedback>\n                        </CFormGroup>\n                      </CCol>\n                    </CRow>\n                    <CFormGroup variant=\"custom-checkbox\" className=\"pb-3\">\n                      <CInputCheckbox\n                        custom\n                        id=\"accept\"\n                        required\n                        valid={!errors.accept}\n                        invalid={touched.accept && !!errors.accept}\n                        onChange={handleChange}\n                        onBlur={handleBlur} \n                      />\n                      <CLabel variant=\"custom-checkbox\" htmlFor=\"accept\">\n                        I accept the terms of use\n                      </CLabel>\n                      <CInvalidFeedback>{errors.accept}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CButton type=\"submit\" color=\"primary\" className=\"mr-1\" disabled={isSubmitting || !isValid}>{isSubmitting ? 'Wait...' : 'Submit'}</CButton>\n                      <CButton type=\"button\" color=\"success\" className=\"mr-1\" onClick={() => touchAll(setTouched, errors)}  disabled={isValid}>Validate</CButton>\n                      <CButton type=\"reset\" color=\"danger\" className=\"mr-1\" onClick={handleReset}>Reset</CButton>\n                    </CFormGroup>\n                  </CForm>\n                </CCol>\n                <CCol lg=\"6\">\n                  <CCard color={isValid ? 'gradient-info' : 'gradient-secondary'}>\n                    <CCardBody>\n                      <pre>values: {JSON.stringify(values, null, 2)}</pre>\n                      <pre>errors: {JSON.stringify(errors, null, 2)}</pre>\n                      <pre>touched: {JSON.stringify(touched, null, 2)}</pre>\n                    </CCardBody>\n                  </CCard>\n                </CCol>\n              </CRow>\n            )}\n        </Formik>\n      </CCardBody>\n    </CCard>\n  )\n}\n\nexport default ValidationForms\n","import React from 'react'\nimport { CLink } from '@coreui/react'\n\nconst DocsLink = props => {\n  const {\n    name,\n    text,\n    ...rest\n  } = props\n\n  const href = name ? `https://coreui.io/react/docs/components/${name}` : props.href\n\n  return (\n    <div className=\"card-header-actions\">\n      <CLink \n        {...rest}\n        href={href}\n        rel=\"noreferrer noopener\" \n        target=\"_blank\" \n        className=\"card-header-action\"  \n      >\n        <small className=\"text-muted\">{ text || 'docs' }</small>\n      </CLink>\n    </div>\n  )\n}\n\nexport default React.memo(DocsLink)","import React from 'react'\nimport { CBadge } from '@coreui/react'\nimport PropTypes from 'prop-types'\n\nconst ProBadge = props => {\n  let { children, ...attributes } = { ...props }\n  return (\n    <CBadge\n      href=\"https://coreui.io/pro/react/\"\n      color=\"danger\"\n      target=\"_blank\"\n      rel=\"noreferrer noopener\"\n      {...attributes}\n    >\n      {children ? children : 'CoreUI Pro Component'}\n    </CBadge>\n  )\n}\n\nProBadge.propTypes = {\n  children: PropTypes.node\n}\n\nexport default React.memo(ProBadge)\n"],"sourceRoot":""}